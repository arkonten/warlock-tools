.pack file format description
=============================

Note: Little-endian is always used.

.pack file
----------

<int32> = NR_FILES          Number of files this .pack contains.
<int32>                     Pack format version? Seems to always be 0.
<file_record>*NR_FILES
<data_blob>*NR_FILES


file_record
-----------

<80 bytes>                  Unpacked file's name buffer. File name must be
                            NULL-terminated or use the full buffer.
<int32>                     Size of uncompressed file.
<int32> = BLOB_SIZE         Size of (potentially) compressed file.
<int32>                     Offset in this file where the data blob
                            (compressed or not) is stored.
<12 bytes>                  Unknown. Doesn't seem to matter. The first 4 bytes
                            are always 0x0000, so it could be that the offset
                            actually is int64 (which would mean that .pack
                            files are not limited to 4 GiB size). The next 4
                            bytes seem to change for each file_record, and the
                            last 4 bytes seem to *almost* always be the same
                            throughout a .pack.
<4 bytes>                   Interpret as boolean; determines whether to use
                            zip compression for the corresponding data_blob.


data_blob
---------

<1 byte>*BLOB_SIZE          The packed file for the corresponding file_record.
                            Is zip compressed if so declared in the
                            file_record, otherwise it's just the file's raw
                            binary data.


TXML bin v2.0 file format description
=====================================

Note: Little-endian is always used.

TXML file
---------

<12 bytes>                  File header, should be "txml binv2.0".
<4 bytes>                   Unknown, but values doesn't seem to have effect.
<16 bytes>                  All seem to always be 0x00.
<int32> = NR_STRINGS        The number of strings in string_blob.
<int32> = STRINGS_SIZE      The total length of string_blob.
<string_record>*NR_STRINGS  See definition below. Sorted in ascending order
                            with respect to the offset. First one always has
                            offset 0 and length 0 for the empty string.
<string_blob>               See definition below.
<node>                      See definition below.


string_record
-------------

<int32>                     Offset of some string S in string blob.
<int32>                     Length of string S.


string_blob
-----------

<1 byte>*STRINGS_SIZE       This is all strings used in the TXML concatenated.
                            The offset of string_record:s are with respect to
                            this blob, and when we talk of a number n being
                            "index of string", we mean the string described
                            by the n:th string_record.

node
----

<int32>                     Index of string to use for node tag.
<int32> = NR_ATTRS          Number of attributes of node.
<node_attr>*NR_ATTRS        See definition below. Note: can be empty.
<int32> = NR_VALS           Number of value nodes.
<val_node>*NR_VALS          See definition below. Note: can be empty.
<int32> = NR_SUB_NODES      Number of sub-nodes.
<node>*NR_SUB_NODES         Recursive definition. Note: can be empty.


node_attr
---------

<int32>                     Index of string to use for attribute name.
<int32>                     Index of string to use for attribute value.


val_node:
<int32>                     Index of string to use for node tag.
<int32> = TYPE              Value node type.
<TYPE-specific data>        Depends on the value node type, TYPE. See below.


Value node types
----------------

0:                          (Integer)
<int32>                     Integer value.

1:                          (Floating point number)
<float32>                   Floatting point value.

2:                          (String)
<int32>                     Index of string to use as value.

3:                          (Float)
<1 byte>                    Boolean value.

4:                          (Long long integer)
<int64>                     64-bit integer value.

5:                          (2D point with integer values)
<int32>                     X coordinate.
<int32>                     Y coordinate.

6:                          (2D point with floating point values)
<float32>                   X coordinate.
<float32>                   Y coordinate.

7:                          (3D point with floating point values)
<float32>                   X coordinate.
<float32>                   Y coordinate.
<float32>                   Z coordinate.

8:                          (RGBA color)
<1 byte>                    Red.
<1 byte>                    Green.
<1 byte>                    Blue.
<1 byte>                    Alpha.

9:                          (Byte array)
<int32>                     Length of byte array. Let's call it LEN.
<1 byte>*LEN                Byte array values.

10:                         (Size)
<int32> (or float32?)       Width?
<int32> (or float32?)       Height?

11:                         (Rectangle)
<int32> (or float32?)       X coordinate of some corner?
<int32> (or float32?)       Y coordinate of some corner?
<int32> (or float32?)       Width in some direction w.r.t corner (X,Y)?
<int32> (or float32?)       Height in some direction w.r.t corner (X,Y)?

12:                         (Short integer)
<int16>                     16-bit integer value.


Warning! Since I never encountered TXML value node types 4 (64-bit
integer), 10 (Size), 11 (Rectangle) and 12 (16-bit integer) the code
dealing with them could be incorrect, but I'm pretty sure at least 4
(64-bit integer) and 12 (16-bit integer) are ok. The only time this
could become a problem is if a patch or DLC introduces TXMLs using
these types (all existing content as of April 2013 are ok).
